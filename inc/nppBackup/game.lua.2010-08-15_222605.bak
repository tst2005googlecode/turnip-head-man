

player = {
	facing = 'left',
	isJumping = 0,
	x = 100,
	y = 100,
	speed = 140,
	gravitySpeed = 250,
	falling = false,
	world = 1,
	stage = 1,
}
--local bound = {right = love.graphics.newImage('img/player/right/walkingBounding.png'), left = love.graphics.newImage('img/player/left/walkingBounding.png')}
game = {state = 'newGame'}

local backgrounds = {}



---------------------------------------------------------------------------------------------------------
------------------------------------------Game Functions-----------------------------------------------
---------------------------------------------------------------------------------------------------------

function game:run() --calls the game state 
	game[game.state]()
end

function game:running() --is run when the game is `running`
	player:update()
	game:backgrounds()
end

function game:backgrounds()
	for i,v in pairs(backgrounds) do
		love.graphics.draw(v.image,v.x,v.y)
	end
end

function game:start() --called when you start a game
	
end

function game:newGame() --called when you start a NEW game
	player.left = newImageAnimation('img/player/left/', 0.08, 9)
	player.right =  newImageAnimation('img/player/right/', 0.08, 9)
	game:buildMap()
	game.state = 'running'
end

function game:loadGame() --called when you start LOAD a game
	
end

function game:paused()
	
end

function game:buildMap()
		
		local temp = 'img/maps/'..player.world..'/'..player.stage..'/'
		local collision = false
		local colMap = false
		backgrounds = {}
		
		for x = 1,4 do
			if x > 2 then collision = true colMap else collision = false colMap = false end
			table.insert(backgrounds,{
			image = love.graphics.newImage( temp..x..'.png'), 
			collide = collision, collisionMap = false, 
			x=0,
			y=0,
			})
		end
end









---------------------------------------------------------------------------------------------------------
------------------------------------------Player Functions-----------------------------------------------
---------------------------------------------------------------------------------------------------------


function player:gravity()
	local findGround = false
	local colMap = collision:newCollisionMap('img/player/player.col')
	if player.isJumping < 1 then
		player.isJumping = 0
		if not player:isColliding(player.x,(player.y+player.determineSpeed(player.gravitySpeed)),colMap) then
			player.y = player.y+player.determineSpeed(player.gravitySpeed)
		
		else
			findGround = true
		end
		
		if player:isColliding(player.x,(player.y+1),colMap) then
			player.falling = false
		elseif findGround then
			for x = 1, 99 do
				if not player:isColliding(player.x,(player.y+1),colMap) then
					player.y = player.y+1
				else
					break
				end
			end
		end
		
	end
end

function player:jumping()
	local colMap = collision:newCollisionMap('img/player/player.col')
	local tempY = player.y - player.determineSpeed(player.gravitySpeed)
	local tempJ = player.isJumping - player.determineSpeed(player.gravitySpeed)
	if player.isJumping > 0 and not player:isColliding(player.x,tempY,colMap) then
		player.y = tempY
		player.isJumping = tempJ
	elseif 	player:isColliding(player.x,tempY,colMap) then
		player.isJumping = true
		player.isJumping = 0
	end
end

function player:die()
	error('nawwww....')
end

function player:update(dt)
	player.sprite():update(dt)
	player:gravity()
	player:jumping()
	player:walking()
	player:draw()
end

function player:walking()
	
	local mathDelta = player.determineSpeed(player.speed)
	local colMap = collision:newCollisionMap('img/player/player.col')

	if love.keyboard.isDown( 'left')  then
	
		if not (player.facing == 'left') then
			player.facing = 'left' 
		end
		
		if not player:isColliding(player.x-mathDelta,player.y-1,colMap) then
			player.x = player.x - mathDelta
			player:sprite():toggle(true)
		else
			player:sprite():toggle(false)
			player:sprite():reset(3)
		end
		
		if not player:isColliding((player.x-1),player.y-1, colMap) then
			player.x = player.x-1
			player:sprite():toggle(true)
		else
			player:sprite():toggle(false)
			player:sprite():reset(3)
		end
		
    end

    if love.keyboard.isDown('right') then
		if not (player.facing == 'right') then
			player.facing = 'right' 
		end

		if not player:isColliding(player.x+mathDelta,player.y-1, colMap) then
			player.x = player.x + mathDelta
			player:sprite():toggle(true)
		else
			player:sprite():toggle(false)
			player:sprite():reset(3)
		end
		
		if not player:isColliding((player.x+1),player.y-1,colMap) then
			player.x = player.x+1
			player:sprite():toggle(true)
		else
			player:sprite():toggle(false)
			player:sprite():reset(3)
		end
    end

    if love.keyboard.isDown('up') and player.falling == false then
		player.falling = true
		player.isJumping = 65
		player:sprite():toggle(false)
    end

    if love.keyboard.isDown('down') then
		--this is really just a place holder; I'll probably never add anything here.
    end
	
	if not love.keyboard.isDown('down') and not love.keyboard.isDown('up') and not love.keyboard.isDown('right') and not love.keyboard.isDown( 'left') then
		player:sprite():toggle(false)
		player:sprite():reset(3)
	end
	
	debugVal = player.falling
end

function player:draw()
	 player:sprite():draw(player.x, player.y, 0,1,1,0,0)
	 --love.graphics.draw(bound[player.facing],player.x, player.y, 0,1,1,0,0)
end

function player:isColliding(x,y, CM)
	local sprite1 = player:sprite():getImage()
	if CM then
		sprite1.collisionMap = CM
	end
	sprite1.x = x
	sprite1.y = y
	for x = 1,4 do	
		
		--if backgrounds[x].collide and collision:checkCollision( sprite1, backgrounds[x] ) then return collision:checkCollision( sprite1, backgrounds[x] ) end
	end
end

function player:sprite()
	return player[player.facing]
end

function player.determineSpeed(speed)
	return math.ceil(math.round((speed * dt),0))
end












